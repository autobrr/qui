name: Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "config.toml"
      - "docker-compose.yml"
      - "Makefile"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "config.toml"
      - "docker-compose.yml"
      - "Makefile"
      - "**.md"

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: "1.24"
  NODE_VERSION: "22.18.0"
  # Polar credentials from GitHub secrets
  POLAR_ACCESS_TOKEN: ${{ secrets.POLAR_ACCESS_TOKEN }}
  POLAR_ORG_ID: ${{ secrets.POLAR_ORG_ID }}
  POLAR_ENVIRONMENT: ${{ secrets.POLAR_ENVIRONMENT || 'production' }}

permissions:
  contents: write
  packages: write

jobs:
  web:
    name: Build web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: web
        run: pnpm install --frozen-lockfile

      - name: Type check frontend
        working-directory: web
        run: pnpm tsc --noEmit

      - name: Build web frontend
        working-directory: web
        run: CI= pnpm run build

      # Copy build to embed location
      - name: Copy frontend build
        run: |
          rm -rf internal/web/dist
          cp -r web/dist internal/web/

      - name: Upload web production build
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: internal/web/dist

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: [web]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web production build
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: internal/web/dist

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # Partial builds - split across multiple runners
  goreleaser-partial:
    name: Build partial binaries (${{ matrix.target }})
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    needs: [test, web]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux  # Includes Linux and FreeBSD builds
          - os: macos-latest
            target: darwin
          - os: windows-latest
            target: windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download web production build
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: internal/web/dist

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Optimize Windows builds by using faster D: drive
      - name: Configure Windows for faster builds
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Set environment variables to use D: drive for Go caches
          echo "GOCACHE=D:/go-cache" >> "$GITHUB_ENV"
          echo "GOMODCACHE=D:/go-mod" >> "$GITHUB_ENV"
          echo "GOTMPDIR=D:/tmp" >> "$GITHUB_ENV"
          
          # Create directories
          mkdir -p D:/go-cache D:/go-mod D:/tmp

      - name: Run partial build
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --split ${{ !startsWith(github.ref, 'refs/tags/') && '--skip=publish' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions
          POLAR_ACCESS_TOKEN: ${{ secrets.POLAR_ACCESS_TOKEN }}
          POLAR_ORG_ID: ${{ secrets.POLAR_ORG_ID }}
          POLAR_ENVIRONMENT: ${{ secrets.POLAR_ENVIRONMENT || 'production' }}

      - name: Save partial build cache  
        uses: actions/cache/save@v4
        with:
          path: dist
          key: goreleaser-partial-${{ github.sha }}-${{ matrix.target }}
          enableCrossOsArchive: true

  # Merge partial builds
  goreleaser-merge:
    name: Merge and ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build' }}
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [goreleaser-partial]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download web production build
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: internal/web/dist

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Restore Linux partial build
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-partial-${{ github.sha }}-linux
          enableCrossOsArchive: true
          fail-on-cache-miss: true

      - name: Restore Darwin partial build
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-partial-${{ github.sha }}-darwin
          enableCrossOsArchive: true
          fail-on-cache-miss: true

      - name: Restore Windows partial build
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-partial-${{ github.sha }}-windows
          enableCrossOsArchive: true
          fail-on-cache-miss: true

      - name: Merge partial builds and ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build' }}
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: continue --merge ${{ !startsWith(github.ref, 'refs/tags/') && '--skip=publish' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions
          POLAR_ACCESS_TOKEN: ${{ secrets.POLAR_ACCESS_TOKEN }}
          POLAR_ORG_ID: ${{ secrets.POLAR_ORG_ID }}
          POLAR_ENVIRONMENT: ${{ secrets.POLAR_ENVIRONMENT || 'production' }}

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: qui-release
          path: |
            dist/**/*.tar.gz
            dist/**/*.zip
            dist/*.txt

  docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: [test, web]
    # Only run after release artifacts are ready (either from merge or regular build)
    if: always() && (needs.test.result == 'success' && needs.web.result == 'success')
    strategy:
      fail-fast: true
      matrix:
        platform:
          - linux/amd64
          - linux/amd64/v2
          - linux/amd64/v3
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download web production build
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: internal/web/dist

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            type=ref,event=branch
            type=ref,event=pr
          flavor: |
            latest=auto

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and publish image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./ci.Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ (github.event.pull_request.head.repo.full_name == github.repository || github.event_name != 'pull_request') && 'true' || 'false' }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            BUILDER=${{ github.actor }}@github-actions
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            POLAR_ACCESS_TOKEN=${{ secrets.POLAR_ACCESS_TOKEN }}
            POLAR_ORG_ID=${{ secrets.POLAR_ORG_ID }}
            POLAR_ENVIRONMENT=${{ secrets.POLAR_ENVIRONMENT || 'production' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Export image digest
        id: digest-prep
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_build.outputs.digest }}"
          echo "manifest-hash=${digest#sha256:}" >> "$GITHUB_OUTPUT"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload image digest
        uses: actions/upload-artifact@v4
        with:
          name: docker-digests-${{ steps.digest-prep.outputs.manifest-hash }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    name: Publish Docker multi-arch manifest
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository || github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: Download image digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: docker-digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            type=ref,event=branch
            type=ref,event=pr
          flavor: |
            latest=auto

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}