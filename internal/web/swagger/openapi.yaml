openapi: 3.1.0
info:
  title: qui API
  description: qui API for managing multiple qBittorrent instances
  version: 1.0.0
  license:
    name: GPL-2.0-or-later
    url: https://opensource.org/licenses/GPL-2.0

servers:
  - url: http://localhost:7476
    description: Local development server
  - url: /
    description: Current server

security:
  - ApiKeyAuth: []
  - SessionAuth: []

paths:
  /api/auth/setup:
    post:
      tags:
        - Authentication
      summary: Initial setup
      description: Create the initial admin user (only available before first user is created)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 8
                  writeOnly: true
                  description: Password will be hashed and never returned in responses
      responses:
        '201':
          description: Setup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Setup already completed

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: Authenticate with username and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  writeOnly: true
                  description: Password will be hashed and never returned in responses
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /api/auth/check-setup:
    get:
      tags:
        - Authentication
      summary: Check setup status
      description: Check if initial setup is required
      security: []
      responses:
        '200':
          description: Setup status
          content:
            application/json:
              schema:
                type: object
                properties:
                  setupRequired:
                    type: boolean

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: End the current session
      responses:
        '200':
          description: Logged out successfully

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the authenticated user
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/auth/change-password:
    put:
      tags:
        - Authentication
      summary: Change password
      description: Change the current user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  writeOnly: true
                  description: Current password for verification
                newPassword:
                  type: string
                  minLength: 8
                  writeOnly: true
                  description: New password will be hashed and never returned in responses
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Invalid current password

  /api/api-keys:
    get:
      tags:
        - API Keys
      summary: List API keys
      description: Get all API keys for the current user
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
    post:
      tags:
        - API Keys
      summary: Create API key
      description: Generate a new API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Descriptive name for the API key
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  key:
                    type: string
                    description: The API key (only shown once)
                  createdAt:
                    type: string
                    format: date-time
                  message:
                    type: string

  /api/api-keys/{id}:
    delete:
      tags:
        - API Keys
      summary: Delete API key
      description: Revoke an API key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: API key deleted successfully
        '404':
          description: API key not found

  /api/client-api-keys:
    get:
      tags:
        - Client API Keys
      summary: List client API keys
      description: Get all client API keys for external applications
      responses:
        '200':
          description: List of client API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientApiKey'
    post:
      tags:
        - Client API Keys
      summary: Create client API key
      description: Generate a new client API key for external applications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientName
                - instanceId
              properties:
                clientName:
                  type: string
                  description: Name of the client application (e.g., "Sonarr")
                instanceId:
                  type: integer
                  description: ID of the qBittorrent instance to proxy to
      responses:
        '201':
          description: Client API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  clientName:
                    type: string
                  instanceId:
                    type: integer
                  key:
                    type: string
                    description: The client API key (only shown once)
                  createdAt:
                    type: string
                    format: date-time
                  message:
                    type: string

  /api/client-api-keys/{id}:
    delete:
      tags:
        - Client API Keys
      summary: Delete client API key
      description: Revoke a client API key
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Client API key deleted successfully
        '404':
          description: Client API key not found

  /api/instances:
    get:
      tags:
        - Instances
      summary: List instances
      description: Get all configured qBittorrent instances
      responses:
        '200':
          description: List of instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
    post:
      tags:
        - Instances
      summary: Add instance
      description: Add a new qBittorrent instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - host
                - username
                - password
              properties:
                name:
                  type: string
                host:
                  type: string
                  format: uri
                username:
                  type: string
                password:
                  type: string
                  writeOnly: true
                  description: Password for qBittorrent instance. Will be encrypted and never returned in responses.
                basicUsername:
                  type: string
                  nullable: true
                  description: Optional basic auth username
                basicPassword:
                  type: string
                  nullable: true
                  writeOnly: true
                  description: Optional basic auth password. Will be encrypted and never returned in responses.
                tlsSkipVerify:
                  type: boolean
                  description: Set to true to disable TLS certificate verification (for trusted self-signed certificates).
      responses:
        '201':
          description: Instance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'

  /api/instances/order:
    put:
      tags:
        - Instances
      summary: Reorder instances
      description: Update the display order for all configured instances. The list must include every instance ID exactly once.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - instanceIds
              properties:
                instanceIds:
                  type: array
                  items:
                    type: integer
                  description: Instance IDs in the desired display order.
      responses:
        '200':
          description: Updated list of instances in the new order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
        '400':
          description: Invalid reorder request
        '500':
          description: Failed to persist the new instance order

  /api/instances/{instanceId}:
    put:
      tags:
        - Instances
      summary: Update instance
      description: Update instance configuration
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                host:
                  type: string
                  format: uri
                username:
                  type: string
                password:
                  type: string
                  writeOnly: true
                  description: Password for qBittorrent instance. Optional for updates - only updates if provided and not masked.
                basicUsername:
                  type: string
                  nullable: true
                  description: Optional basic auth username
                basicPassword:
                  type: string
                  nullable: true
                  writeOnly: true
                  description: Optional basic auth password. For updates - provide new password to update, omit field to keep existing, or empty string to remove basic auth.
                tlsSkipVerify:
                  type: boolean
                  description: Set to true to disable TLS certificate verification (for trusted self-signed certificates).
      responses:
        '200':
          description: Instance updated
    delete:
      tags:
        - Instances
      summary: Delete instance
      description: Remove a qBittorrent instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '204':
          description: Instance deleted
        '404':
          description: Instance not found

  /api/instances/{instanceId}/test:
    post:
      tags:
        - Instances
      summary: Test connection
      description: Test connection to a qBittorrent instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Connection successful
        '503':
          description: Connection failed

  /api/instances/{instanceId}/app-info:
    get:
      tags:
        - Instances
      summary: Get qBittorrent application info
      description: Get qBittorrent version and build information for an instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: qBittorrent application information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QBittorrentAppInfo'
        '400':
          description: Invalid instance ID
        '500':
          description: Failed to get qBittorrent application info

  /api/instances/{instanceId}/capabilities:
    get:
      tags:
        - Instances
      summary: Get instance capabilities
      description: Retrieve lightweight capability metadata for a qBittorrent instance.
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Instance capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceCapabilities'
        '400':
          description: Invalid instance ID
        '503':
          description: Instance unavailable


  /api/instances/{instanceId}/torrents:
    get:
      tags:
        - Torrents
      summary: List torrents
      description: Get paginated list of torrents
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 500
            maximum: 2000
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, size, progress, priority, added_on]
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: search
          in: query
          schema:
            type: string
        - name: filters
          in: query
          schema:
            type: string
            description: JSON object with filter criteria (`status`, `categories`, `tags`, `excludeTags`, `trackers`)
      responses:
        '200':
          description: Paginated torrent list
          content:
            application/json:
              schema:
                type: object
                properties:
                  torrents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Torrent'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
    post:
      tags:
        - Torrents
      summary: Add torrent
      description: Add a new torrent via file upload or magnet link
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                torrentFile:
                  type: string
                  format: binary
                urls:
                  type: array
                  items:
                    type: string
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                startPaused:
                  type: boolean
                savePath:
                  type: string
      responses:
        '201':
          description: Torrent added successfully


  /api/instances/{instanceId}/torrents/check-duplicates:
    post:
      tags:
        - Torrents
      summary: Check for duplicate torrents
      description: Determine whether any of the provided hashes already exist on the qBittorrent instance. Supports infohash v1 or v2 values.
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hashes
              properties:
                hashes:
                  type: array
                  description: List of torrent hashes to check. Maximum 512 entries per request.
                  items:
                    type: string
      responses:
        '200':
          description: Existing torrents matching the provided hashes
          content:
            application/json:
              schema:
                type: object
                properties:
                  duplicates:
                    type: array
                    items:
                      $ref: '#/components/schemas/DuplicateTorrentMatch'
        '400':
          description: Invalid request body or too many hashes provided
        '500':
          description: Failed to check duplicates


  /api/instances/{instanceId}/torrents/bulk-action:
    post:
      tags:
        - Torrents
      summary: Bulk torrent action
      description: Perform bulk actions on multiple torrents
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                hashes:
                  type: array
                  items:
                    type: string
                  description: Specific torrent hashes to target. Required unless selectAll is true.
                selectAll:
                  type: boolean
                  description: Apply the action to all torrents matching the provided filters.
                filters:
                  type: object
                  description: Filter criteria used when selectAll is true.
                  properties:
                    status:
                      type: array
                      items:
                        type: string
                    categories:
                      type: array
                      items:
                        type: string
                    tags:
                      type: array
                      items:
                        type: string
                    trackers:
                      type: array
                      items:
                        type: string
                search:
                  type: string
                  description: Optional search query applied when selectAll is true.
                excludeHashes:
                  type: array
                  items:
                    type: string
                  description: Hashes to exclude when selectAll is true.
                action:
                  type: string
                  description: Bulk action to perform on the selected torrents.
                  enum:
                    - pause
                    - resume
                    - delete
                    - deleteWithFiles
                    - recheck
                    - reannounce
                    - increasePriority
                    - decreasePriority
                    - topPriority
                    - bottomPriority
                    - addTags
                    - removeTags
                    - setTags
                    - setCategory
                    - toggleAutoTMM
                    - setShareLimit
                    - setUploadLimit
                    - setDownloadLimit
                    - setLocation
                    - editTrackers
                    - addTrackers
                    - removeTrackers
                deleteFiles:
                  type: boolean
                  description: Only for delete action
                tags:
                  type: string
                  description: Comma-separated list of tags for tag-related actions.
                category:
                  type: string
                  description: Category name for setCategory action.
                enable:
                  type: boolean
                  description: Enable or disable Automatic Torrent Management for toggleAutoTMM.
                ratioLimit:
                  type: number
                  format: float
                  description: Ratio limit for setShareLimit action.
                seedingTimeLimit:
                  type: integer
                  format: int64
                  description: Seeding time limit (minutes) for setShareLimit action.
                inactiveSeedingTimeLimit:
                  type: integer
                  format: int64
                  description: Inactive seeding time limit (minutes) for setShareLimit action.
                uploadLimit:
                  type: integer
                  format: int64
                  description: Upload speed limit in KB/s for setUploadLimit action.
                downloadLimit:
                  type: integer
                  format: int64
                  description: Download speed limit in KB/s for setDownloadLimit action.
                location:
                  type: string
                  description: Destination path for setLocation action.
                trackerOldURL:
                  type: string
                  description: Existing tracker URL to replace for editTrackers action.
                trackerNewURL:
                  type: string
                  description: Replacement tracker URL for editTrackers action.
                trackerURLs:
                  type: string
                  description: Newline-separated tracker URLs for addTrackers/removeTrackers actions.
      responses:
        '200':
          description: Action performed successfully


  /api/instances/{instanceId}/torrents/{hash}/export:
    get:
      tags:
        - Torrent Details
      summary: Export torrent file
      description: Download the .torrent file for a specific torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: Torrent file
          content:
            application/x-bittorrent:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request
        '500':
          description: Failed to export torrent

  /api/instances/{instanceId}/torrents/{hash}/properties:
    get:
      tags:
        - Torrent Details
      summary: Get torrent properties
      description: Get detailed properties of a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: Torrent properties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TorrentProperties'

  /api/instances/{instanceId}/torrents/{hash}/trackers:
    get:
      tags:
        - Torrent Details
      summary: Get torrent trackers
      description: Get list of trackers for a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: List of trackers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tracker'
    put:
      tags:
        - Torrent Details
      summary: Edit torrent tracker
      description: Edit a tracker URL for a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldURL
                - newURL
              properties:
                oldURL:
                  type: string
                  description: The current tracker URL to replace
                newURL:
                  type: string
                  description: The new tracker URL
      responses:
        '200':
          description: Tracker edited successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to edit tracker
    post:
      tags:
        - Torrent Details
      summary: Add torrent trackers
      description: Add new trackers to a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - urls
              properties:
                urls:
                  type: string
                  description: Newline-separated list of tracker URLs to add
      responses:
        '200':
          description: Trackers added successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to add trackers
    delete:
      tags:
        - Torrent Details
      summary: Remove torrent trackers
      description: Remove trackers from a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - urls
              properties:
                urls:
                  type: string
                  description: Newline-separated list of tracker URLs to remove
      responses:
        '200':
          description: Trackers removed successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to remove trackers

  /api/instances/{instanceId}/torrents/{hash}/files:
    get:
      tags:
        - Torrent Details
      summary: Get torrent files
      description: Get list of files in a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TorrentFile'
    put:
      tags:
        - Torrent Details
      summary: Update torrent file priorities
      description: Adjust the download priority (including do-not-download) for one or more files in a torrent.
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - indices
                - priority
              properties:
                indices:
                  type: array
                  description: File indices to update.
                  minItems: 1
                  items:
                    type: integer
                    minimum: 0
                priority:
                  type: integer
                  description: Desired priority value (0-7, where 0 marks files as do-not-download).
                  minimum: 0
                  maximum: 7
      responses:
        '204':
          description: File priorities updated successfully
        '400':
          description: Invalid request payload or priority
        '409':
          description: Torrent metadata not yet available
        '500':
          description: Failed to update file priorities

  /api/instances/{instanceId}/torrents/{hash}/rename:
    put:
      tags:
        - Torrent Details
      summary: Rename torrent
      description: Update the display name for a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: New name to assign to the torrent
      responses:
        '200':
          description: Torrent renamed successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to rename torrent

  /api/instances/{instanceId}/torrents/{hash}/rename-file:
    put:
      tags:
        - Torrent Details
      summary: Rename torrent file
      description: Rename a specific file within a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPath
                - newPath
              properties:
                oldPath:
                  type: string
                  description: Existing relative path of the file inside the torrent
                newPath:
                  type: string
                  description: New relative path (including file name) to apply
      responses:
        '200':
          description: Torrent file renamed successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to rename torrent file

  /api/instances/{instanceId}/torrents/{hash}/rename-folder:
    put:
      tags:
        - Torrent Details
      summary: Rename torrent folder
      description: Rename a folder within a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPath
                - newPath
              properties:
                oldPath:
                  type: string
                  description: Existing folder path relative to the torrent root
                newPath:
                  type: string
                  description: New folder path (relative) to apply
      responses:
        '200':
          description: Torrent folder renamed successfully
        '400':
          description: Invalid request
        '500':
          description: Failed to rename torrent folder

  /api/instances/{instanceId}/torrents/{hash}/peers:
    get:
      tags:
        - Torrent Details
      summary: Get torrent peers
      description: Get list of peers for a torrent
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: List of peers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ip:
                      type: string
                    port:
                      type: integer
                    client:
                      type: string
                    progress:
                      type: number
                    dlSpeed:
                      type: integer
                    upSpeed:
                      type: integer
                    downloaded:
                      type: integer
                    uploaded:
                      type: integer
                    connection:
                      type: string
                    flags:
                      type: string
                    flagsDesc:
                      type: string
                    relevance:
                      type: number

  /api/instances/{instanceId}/torrents/add-peers:
    post:
      tags:
        - Torrents
      summary: Add peers to torrents
      description: Add peers to one or more torrents
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hashes
                - peers
              properties:
                hashes:
                  type: array
                  items:
                    type: string
                  description: List of torrent hashes
                peers:
                  type: array
                  items:
                    type: string
                  description: List of peers in host:port format
      responses:
        '200':
          description: Peers added successfully

  /api/instances/{instanceId}/torrents/ban-peers:
    post:
      tags:
        - Torrents
      summary: Ban peers permanently
      description: Ban peers from connecting to the client
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - peers
              properties:
                peers:
                  type: array
                  items:
                    type: string
                  description: List of peer IPs to ban
      responses:
        '200':
          description: Peers banned successfully

  /api/instances/{instanceId}/torrent-creator:
    post:
      tags:
        - Torrents
      summary: Create torrent
      description: Create a new torrent file from a source path. Requires qBittorrent v5.0.0 or later.
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sourcePath
              properties:
                sourcePath:
                  type: string
                  description: Path to the source file or directory
                torrentFilePath:
                  type: string
                  description: Custom path for saving the torrent file
                private:
                  type: boolean
                  description: Create a private torrent
                format:
                  type: string
                  enum: [v1, v2, hybrid]
                  description: Torrent format
                optimizeAlignment:
                  type: boolean
                  description: Optimize piece alignment
                paddedFileSizeLimit:
                  type: integer
                  description: Padded file size limit
                pieceSize:
                  type: integer
                  description: Piece size in bytes
                comment:
                  type: string
                  description: Comment for the torrent
                source:
                  type: string
                  description: Source string for the torrent
                trackers:
                  type: array
                  items:
                    type: string
                  description: List of tracker URLs
                urlSeeds:
                  type: array
                  items:
                    type: string
                  description: List of URL seeds
                startSeeding:
                  type: boolean
                  description: Start seeding after creation
      responses:
        '201':
          description: Torrent creation task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskID:
                    type: string
                  sourcePath:
                    type: string
                  status:
                    type: string
                  timeAdded:
                    type: string
        '400':
          description: Invalid request or unsupported qBittorrent version
        '409':
          description: Too many active torrent creation tasks

  /api/instances/{instanceId}/torrent-creator/status:
    get:
      tags:
        - Torrents
      summary: Get torrent creation status
      description: Get status of torrent creation tasks. Query parameter taskID can be used to filter by specific task.
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: taskID
          in: query
          schema:
            type: string
          description: Optional task ID to filter by
      responses:
        '200':
          description: List of torrent creation tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    taskID:
                      type: string
                    sourcePath:
                      type: string
                    torrentFilePath:
                      type: string
                    pieceSize:
                      type: integer
                    private:
                      type: boolean
                    format:
                      type: string
                    status:
                      type: string
                    timeAdded:
                      type: string
                    timeStarted:
                      type: string
                    timeFinished:
                      type: string
                    progress:
                      type: number
                    errorMessage:
                      type: string
        '400':
          description: Invalid request or unsupported qBittorrent version
        '404':
          description: Torrent creation task not found

  /api/instances/{instanceId}/torrent-creator/count:
    get:
      tags:
        - Torrents
      summary: Get active torrent creation task count
      description: Get the number of active (running or queued) torrent creation tasks.
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Active torrent creation task count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of active torrent creation tasks
        '400':
          description: Invalid instance ID

  /api/instances/{instanceId}/torrent-creator/{taskID}:
    delete:
      tags:
        - Torrents
      summary: Delete torrent creation task
      description: Delete a torrent creation task
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: taskID
          in: path
          required: true
          schema:
            type: string
          description: Task ID to delete
      responses:
        '200':
          description: Torrent creation task deleted successfully
        '400':
          description: Invalid request or unsupported qBittorrent version
        '404':
          description: Torrent creation task not found

  /api/instances/{instanceId}/torrent-creator/{taskID}/file:
    get:
      tags:
        - Torrents
      summary: Download created torrent file
      description: Download the torrent file for a completed torrent creation task
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: taskID
          in: path
          required: true
          schema:
            type: string
          description: Task ID of the completed torrent
      responses:
        '200':
          description: Torrent file downloaded successfully
          content:
            application/x-bittorrent:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request or unsupported qBittorrent version
        '404':
          description: Torrent creation task not found
        '409':
          description: Torrent creation is still in progress or failed

  /api/instances/{instanceId}/categories:
    get:
      tags:
        - Categories
      summary: List categories
      description: Get all categories
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - Categories
      summary: Create category
      description: Create a new category
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                savePath:
                  type: string
      responses:
        '201':
          description: Category created
    put:
      tags:
        - Categories
      summary: Edit category
      description: Edit an existing category
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                savePath:
                  type: string
      responses:
        '200':
          description: Category updated
    delete:
      tags:
        - Categories
      summary: Delete categories
      description: Delete one or more categories
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - categories
              properties:
                categories:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Categories deleted

  /api/instances/{instanceId}/tags:
    get:
      tags:
        - Tags
      summary: List tags
      description: Get all tags
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    post:
      tags:
        - Tags
      summary: Create tags
      description: Create new tags
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Tags created
    delete:
      tags:
        - Tags
      summary: Delete tags
      description: Delete one or more tags
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Tags deleted

  /api/instances/{instanceId}/trackers:
    get:
      tags:
        - Trackers
      summary: List active trackers
      description: Get active tracker domains and representative tracker URLs for an instance
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Active tracker domains mapped to a tracker URL
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Invalid instance ID
        '500':
          description: Failed to get active trackers

  /api/instances/{instanceId}/preferences:
    get:
      tags:
        - Instances
      summary: Get instance preferences
      description: Get qBittorrent instance preferences/settings
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Instance preferences
          content:
            application/json:
              schema:
                type: object
                description: qBittorrent preferences object with various settings
    patch:
      tags:
        - Instances
      summary: Update instance preferences
      description: Update qBittorrent instance preferences/settings
      parameters:
        - $ref: '#/components/parameters/instanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Partial preferences object with settings to update
      responses:
        '200':
          description: Preferences updated successfully

  /api/instances/{instanceId}/alternative-speed-limits:
    get:
      tags:
        - Instances
      summary: Get alternative speed limits status
      description: Get current status of alternative speed limits (turtle mode)
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Alternative speed limits status
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                    description: Whether alternative speed limits are currently enabled

  /api/instances/{instanceId}/alternative-speed-limits/toggle:
    post:
      tags:
        - Instances
      summary: Toggle alternative speed limits
      description: Toggle alternative speed limits (turtle mode) on/off
      parameters:
        - $ref: '#/components/parameters/instanceId'
      responses:
        '200':
          description: Alternative speed limits toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                    description: New status of alternative speed limits

  /api/license/activate:
    post:
      tags:
        - Licenses
      summary: Activate license
      description: Activate a license key and store it for the current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - licenseKey
              properties:
                licenseKey:
                  type: string
      responses:
        '200':
          description: License activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  productName:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
                  message:
                    type: string
                  error:
                    type: string
                    nullable: true
        '400':
          description: Invalid request payload
        '403':
          description: License activation failed

  /api/license/validate:
    post:
      tags:
        - Licenses
      summary: Validate license
      description: Validate a license key and ensure it remains active
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - licenseKey
              properties:
                licenseKey:
                  type: string
      responses:
        '200':
          description: License validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  productName:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
                  message:
                    type: string
                  error:
                    type: string
                    nullable: true
        '400':
          description: Invalid request payload
        '403':
          description: License validation failed
        '404':
          description: License not found

  /api/license/licensed:
    get:
      tags:
        - Licenses
      summary: Check premium access
      description: Check if any active licenses grant premium access
      responses:
        '200':
          description: Premium access status
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasPremiumAccess:
                    type: boolean

  /api/license/licenses:
    get:
      tags:
        - Licenses
      summary: List licenses
      description: List all stored licenses
      responses:
        '200':
          description: Licenses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    licenseKey:
                      type: string
                    productName:
                      type: string
                    status:
                      type: string
                    createdAt:
                      type: string
                      format: date-time

  /api/license/{licenseKey}:
    delete:
      tags:
        - Licenses
      summary: Delete license
      description: Remove a stored license
      parameters:
        - name: licenseKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: License deleted successfully
        '400':
          description: Invalid license key

  /api/license/refresh:
    post:
      tags:
        - Licenses
      summary: Refresh licenses
      description: Refresh all stored licenses from the licensing service
      responses:
        '200':
          description: Licenses refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Failed to refresh licenses

  /api/tracker-icons:
    get:
      tags:
        - Tracker Icons
      summary: List tracker icons
      description: Retrieve cached tracker favicons as data URLs keyed by tracker hostname
      responses:
        '200':
          description: Cached tracker icons
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  description: Base64-encoded PNG data URL for the tracker favicon
        '500':
          description: Failed to list tracker icons

  /api/version/latest:
    get:
      tags:
        - System
      summary: Check for latest version
      description: Check if a newer version of qui is available
      responses:
        '200':
          description: Update available - newer version found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LatestVersionResponse'
        '204':
          description: No update available - current version is latest

  /api/instances/{instanceId}/backups/runs/{runId}/restore/preview:
    post:
      tags:
        - Backups
      summary: Preview restore plan
      description: Build a restore plan for the specified backup run without applying any changes.
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: runId
          in: path
          required: true
          schema:
            type: integer
          description: Backup run ID
      requestBody:
        description: Restore options
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                mode:
                  type: string
                  description: Restore mode
                  enum:
                    - incremental
                    - overwrite
                    - complete
                excludeHashes:
                  type: array
                  items:
                    type: string
                  description: Torrent hashes to exclude from the generated plan.
                startPaused:
                  type: boolean
                  description: Start restored torrents paused. Defaults to true.
                skipHashCheck:
                  type: boolean
                  description: Skip re-checking the restored torrent data. Defaults to false.
                autoResumeVerified:
                  type: boolean
                  description: Automatically resume torrents once qBittorrent reports them as fully verified. Defaults to true when skip recheck is enabled.
      responses:
        '200':
          description: Restore plan generated successfully
          content:
            application/json:
              schema:
                type: object
                description: Restore plan payload
        '400':
          description: Invalid request payload
        '404':
          description: Backup run not found
        '500':
          description: Failed to build restore plan

  /api/instances/{instanceId}/backups/runs/{runId}/restore:
    post:
      tags:
        - Backups
      summary: Execute restore
      description: Execute the restore plan for the specified backup run.
      parameters:
        - $ref: '#/components/parameters/instanceId'
        - name: runId
          in: path
          required: true
          schema:
            type: integer
          description: Backup run ID
      requestBody:
        description: Restore execution options
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mode
              properties:
                mode:
                  type: string
                  description: Restore mode
                  enum:
                    - incremental
                    - overwrite
                    - complete
                dryRun:
                  type: boolean
                  description: When true, no changes are applied and the plan is returned.
                excludeHashes:
                  type: array
                  items:
                    type: string
                  description: Torrent hashes to exclude from the restore plan and execution.
                startPaused:
                  type: boolean
                  description: Start restored torrents paused. Defaults to true.
                skipHashCheck:
                  type: boolean
                  description: Skip re-checking the restored torrent data. Defaults to false.
                autoResumeVerified:
                  type: boolean
                  description: Automatically resume torrents once qBittorrent reports them as fully verified. Defaults to true when skip recheck is enabled.
      responses:
        '200':
          description: Restore executed successfully
          content:
            application/json:
              schema:
                type: object
                description: Restore result payload
        '400':
          description: Invalid request payload
        '404':
          description: Backup run not found
        '500':
          description: Failed to execute restore

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is healthy and responding
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /healthz/readiness:
    get:
      tags:
        - System
      summary: Readiness probe
      description: Check if the service and its dependencies are ready to receive traffic
      security: []
      responses:
        '200':
          description: Service ready
        '503':
          description: Service not ready

  /healthz/liveness:
    get:
      tags:
        - System
      summary: Liveness probe
      description: Simple liveness check to confirm the service is running
      security: []
      responses:
        '200':
          description: Service is alive


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
    SessionAuth:
      type: apiKey
      in: cookie
      name: user_session
      description: Session cookie authentication

  parameters:
    instanceId:
      name: instanceId
      in: path
      required: true
      schema:
        type: integer
      description: qBittorrent instance ID
    hash:
      name: hash
      in: path
      required: true
      schema:
        type: string
      description: Torrent hash

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string

    ApiKey:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time
          nullable: true

    ClientApiKey:
      type: object
      properties:
        id:
          type: integer
        clientName:
          type: string
          description: Name of the client application
        instanceId:
          type: integer
          description: ID of the qBittorrent instance
        instanceName:
          type: string
          description: Name of the qBittorrent instance
        createdAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time
          nullable: true

    Instance:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        host:
          type: string
          format: uri
        username:
          type: string
        password:
          type: string
          description: Always masked with asterisks in responses. Only used for input.
          readOnly: true
        basic_username:
          type: string
          nullable: true
        basic_password:
          type: string
          description: Always masked with asterisks in responses. Only used for input.
          readOnly: true
          nullable: true
        is_active:
          type: boolean
        last_connected_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        connected:
          type: boolean
          description: Current connection status
        connectionError:
          type: string
          description: Error message if connection failed
        hasDecryptionError:
          type: boolean
          description: Whether there's a password decryption error
        tlsSkipVerify:
          type: boolean
          description: When true, TLS certificate errors from the upstream qBittorrent instance are ignored.
        sortOrder:
          type: integer
          description: Display order preference for the instance.


    InstanceCapabilities:
      type: object
      properties:
        supportsTorrentCreation:
          type: boolean
          description: Whether the instance supports creating torrents via the Web API.
        supportsTorrentExport:
          type: boolean
          description: Whether the instance supports exporting torrent files via the Web API (requires WebAPI 2.8.11+, qBittorrent 4.5.0+).
        supportsSetTags:
          type: boolean
          description: Whether the instance supports replacing tags on torrents.
        supportsTrackerHealth:
          type: boolean
          description: Whether the instance exposes tracker health metadata (unregistered/tracker down states).
        supportsTrackerEditing:
          type: boolean
          description: Whether the instance can edit tracker URLs via the Web API (requires WebAPI 2.2.0+, qBittorrent 4.1.5+).
        supportsRenameTorrent:
          type: boolean
          description: Whether the instance supports renaming torrents (requires WebAPI 2.0.0+, qBittorrent 4.1.0+).
        supportsRenameFile:
          type: boolean
          description: Whether the instance supports renaming files within torrents (requires WebAPI 2.4.0+, qBittorrent 4.2.1+).
        supportsRenameFolder:
          type: boolean
          description: Whether the instance supports renaming folders within torrents (requires WebAPI 2.7.0+, qBittorrent 4.3.3+).
        supportsFilePriority:
          type: boolean
          description: Whether the instance supports updating torrent file priorities (requires WebAPI 2.2.0+, qBittorrent 4.1.5+).
        supportsSubcategories:
          type: boolean
          description: Whether the instance supports nested torrent categories (requires WebAPI 2.9.0+, qBittorrent 4.6.0+).
        webAPIVersion:
          type: string
          nullable: true
          description: Reported qBittorrent Web API version for the instance.


    Torrent:
      type: object
      properties:
        hash:
          type: string
        name:
          type: string
        size:
          type: integer
        progress:
          type: number
        dlSpeed:
          type: integer
        upSpeed:
          type: integer
        priority:
          type: integer
        numSeeds:
          type: integer
        numLeechs:
          type: integer
        ratio:
          type: number
        eta:
          type: integer
        state:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            type: string
        addedOn:
          type: integer
        completedOn:
          type: integer
        savePath:
          type: string

    TorrentProperties:
      type: object
      properties:
        totalDownloaded:
          type: integer
        totalUploaded:
          type: integer
        downloadSpeed:
          type: integer
        uploadSpeed:
          type: integer
        eta:
          type: integer
        seedsActual:
          type: integer
        peersActual:
          type: integer
        shareRatio:
          type: number
        uploadLimit:
          type: integer
        downloadLimit:
          type: integer
        totalSize:
          type: integer
        completedSize:
          type: integer
        additionDate:
          type: integer
        completionDate:
          type: integer
        createdBy:
          type: string
        comment:
          type: string

    Tracker:
      type: object
      properties:
        url:
          type: string
        status:
          type: integer
        tier:
          type: integer
        numPeers:
          type: integer
        numSeeds:
          type: integer
        numLeeches:
          type: integer
        msg:
          type: string

    TorrentFile:
      type: object
      properties:
        name:
          type: string
        size:
          type: integer
        progress:
          type: number
        priority:
          type: integer
        isSeed:
          type: boolean
        availability:
          type: number

    DuplicateTorrentMatch:
      type: object
      properties:
        hash:
          type: string
          description: Primary torrent hash
        infohash_v1:
          type: string
          nullable: true
          description: Legacy v1 infohash if available
        infohash_v2:
          type: string
          nullable: true
          description: v2 infohash if available
        name:
          type: string
          description: Name of the existing torrent that matched
        matched_hashes:
          type: array
          items:
            type: string
          description: Hashes from the request that matched this torrent

    Category:
      type: object
      properties:
        name:
          type: string
        savePath:
          type: string

    LatestVersionResponse:
      type: object
      description: Information about the latest available version when an update is available
      required:
        - tag_name
        - html_url
        - published_at
      properties:
        tag_name:
          type: string
          description: The version tag (e.g., "v1.2.3")
          example: "v1.2.3"
        name:
          type: string
          nullable: true
          description: The release name/title
          example: "qui v1.2.3 - Bug fixes and improvements"
        html_url:
          type: string
          format: uri
          description: URL to the GitHub release page
          example: "https://github.com/autobrr/qui/releases/tag/v1.2.3"
        published_at:
          type: string
          format: date-time
          description: When the release was published
          example: "2025-09-23T10:30:00Z"

    QBittorrentBuildInfo:
      type: object
      description: qBittorrent build information
      properties:
        qt:
          type: string
          description: Qt framework version
          example: "5.15.2"
        libtorrent:
          type: string
          description: libtorrent library version
          example: "2.0.8"
        boost:
          type: string
          description: Boost library version
          example: "1.76.0"
        openssl:
          type: string
          description: OpenSSL library version
          example: "1.1.1k"
        zlib:
          type: string
          description: zlib library version
          example: "1.2.11"
        bitness:
          type: integer
          description: Architecture bitness (32 or 64)
          example: 64
        platform:
          type: string
          description: Operating system platform
          example: "linux"

    QBittorrentAppInfo:
      type: object
      description: qBittorrent application information
      required:
        - version
      properties:
        version:
          type: string
          description: qBittorrent version
          example: "4.6.0"
        webAPIVersion:
          type: string
          description: qBittorrent Web API version
          example: "2.11.4"
        buildInfo:
          $ref: '#/components/schemas/QBittorrentBuildInfo'

tags:
  - name: Authentication
    description: User authentication and session management
  - name: API Keys
    description: API key management
  - name: Client API Keys
    description: Client API key management for external applications
  - name: Instances
    description: qBittorrent instance management
  - name: Torrents
    description: Torrent operations
  - name: Torrent Details
    description: Individual torrent information
  - name: Categories
    description: Category management
  - name: Tags
    description: Tag management
  - name: Theme Licenses
    description: Theme license management (optional feature)
